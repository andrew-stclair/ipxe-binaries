#!/bin/bash

# Get PWD
START_PWD=$(pwd)

# Install dependencies
apt update
apt install -y git make build-essential liblzma-dev gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu

# Clone upstream
rm -rf upstream
mkdir -p upstream
git clone https://github.com/ipxe/ipxe.git upstream

# Checkout latest release
cd upstream
git checkout $(git describe --tags $(git rev-list --tags --max-count=1))

# Enable HTTPS
sed -i -e 's/#undef\tDOWNLOAD_PROTO_HTTPS/#define\tDOWNLOAD_PROTO_HTTPS/g' src/config/general.h

# Copy the embedded script
cd src
cp ../../downstream/init.ipxe .

# Add the embedded script and use all cores
shopt -s expand_aliases
alias EMBEDDED_MAKE="make EMBED=\"init.ipxe\" -j$(nproc)"

# Build
EMBEDDED_MAKE bin-i386-pcbios/ipxe.kpxe &                                           # Legacy
EMBEDDED_MAKE bin-i386-efi/ipxe.efi &                                               # UEFI i386
EMBEDDED_MAKE bin-x86_64-efi/ipxe.efi &                                             # UEFI x86_64
EMBEDDED_MAKE CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm32 bin-arm32-efi/snp.efi &   # UEFI arm32
EMBEDDED_MAKE CROSS_COMPILE=aarch64-linux-gnu- ARCH=arm64 bin-arm64-efi/snp.efi &   # UEFI arm64

# Wait for builds to complete
wait

# Create tmp directory
rm -rf ../../tmp
mkdir -p ../../tmp

# Stage
cp bin-i386-pcbios/ipxe.kpxe ../../tmp/ipxe-i386.kpxe                               # Legacy
cp bin-i386-efi/ipxe.efi ../../tmp/ipxe-i386.efi                                    # UEFI i386
cp bin-x86_64-efi/ipxe.efi ../../tmp/ipxe-x86_64.efi                                # UEFI x86_64
cp bin-arm32-efi/snp.efi ../../tmp/ipxe-arm32.efi                                   # UEFI arm32
cp bin-arm64-efi/snp.efi ../../tmp/ipxe-arm64.efi                                   # UEFI arm64

# Stage downstream files
cp ../../downstream/*.ipxe ../../tmp/.
rm -rf ../../tmp/init.ipxe

# Create tar archive in staging directory
rm -rf ../../staging
mkdir -p ../../staging
tar -zcvf ../../staging/ipxe.tar.gz -C ../../tmp .

# Go back to starting dir
cd $START_PWD
